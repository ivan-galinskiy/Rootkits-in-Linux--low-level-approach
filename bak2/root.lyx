#LyX file created by tex2lyx 1.6.5
\lyxformat 264
\begin_document
\begin_header
\textclass book
\begin_preamble
% This work is about rootkits
\usepackage{multicol}\usepackage{gensymb}\usepackage{listings}

\usepackage{hyperref}\hypersetup{colorlinks,citecolor=black,filecolor=black,linkcolor=black,urlcolor=black,bookmarksopen=true,pdftex}

\hfuzz=.6pt% avoid black boxes
\title{KernelrootkitsinLinux:low-levelapproachandprevention}\date{}\author{IvanGalinskiy}


\end_preamble
\language english
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 12
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Standard


\newpage
 
\emph on
 Copyright (C) 2010 Ivan Galinskiy. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled "GNU Free Documentation License".
\emph default
 
\newpage
 
\end_layout

\begin_layout Section

Kinds of rootkits
\end_layout

\begin_layout Subsection

Classification
\end_layout

\begin_layout Standard

What exactly are the rootkits? In the malware classification, rootkits are programs designed to hide the fact of system intrusion by hiding processes, users, files etc. This is the base classification, which is true for all kinds of rootkits. But if we look at real samples, deviations appear. For example, in some cases the rootkit is not just 
\begin_inset Quotes eld
\end_inset

standalone
\begin_inset Quotes erd
\end_inset

, but a part of another piece of malware which is being hidden. A very good example is Rustock.C designed for Windows.
\end_layout

\begin_layout Subsection

Basic principles of work
\end_layout

\begin_layout Standard

Obviously, the process of hiding something is based on modifying system 
\begin_inset Quotes eld
\end_inset

internals
\begin_inset Quotes erd
\end_inset

, requiring thus some way to gain administrative (root) privileges. This can be done in very different ways, and besides, it is not part of rootkit's job, so we will skip that. But there are basically two ways the rootkit 
\begin_inset Quotes eld
\end_inset

holds
\begin_inset Quotes erd
\end_inset

 itself on the main system: 
\end_layout

\begin_layout Enumerate

Modifying files on the filesystem. When a program has administrative rights on the target machine, it can (almost always) do whatever it 
\begin_inset Quotes eld
\end_inset

wants
\begin_inset Quotes erd
\end_inset

. For example, modifying the passwd or sudo utilities will probably get users' passwords. The disadvantages are obvious. To detect the rootkit, the user needs to check main utilities' checksums from a trusted operating system (either by loading with LiveCD or by taking the harddisk to another machine).
\end_layout

\begin_layout Enumerate

Modifying only the RAM. Of course, at first sight it may look a bit strange, as with a reboot anything will return to normal. But just imagine a server with, lets say, 2 years uptime? Now it looks better, and this kind of rootkits is much tougher (and more interesting to research). 
\end_layout

\begin_layout Chapter

A brief look at DR Linux rootkit
\end_layout

\begin_layout Standard

Well, finding this one was not a difficult task. Besides, it's one of the most up-to-date open-source rootkits available. Others are either very old, or don't match our context, so we will not look at them. The source code indicates that this rootkit is based on debug registers. According to Intel documentation, the debugging registers are DR0 - DR7. DR0 - DR3 registers hold four linear addresses. DR4 and DR5 are reserved for extended debugging and we are not going to look at them now. DR6 is the 
\begin_inset Quotes eld
\end_inset

Debug State Register
\begin_inset Quotes erd
\end_inset

 and DR7 is the 
\begin_inset Quotes eld
\end_inset

Debug Control Register
\begin_inset Quotes erd
\end_inset

. What is their purpose? The below scheme from Intel documentation explains some things. 
\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard

 
\begin_inset Graphics 
	filename dregs.eps
	width 100line%
	keepAspectRatio

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The one interesting is the DR7, which controls the debugging behaviour. For the rootkit, the usefullness is in the ability to control read, write or execute operations (or their combinations) on the breakpoints (note: the settings are individual for each breakpoint). Obviously, the breakpoints are not useful by themselves. When a breakpoint is reached, after executing it, the processor emits a 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!#DB!
\end_layout

\end_inset

 exception, which is catched by the kernel handler in normal cases. But the rootkit changes the handler in Interrupt Descriptor Table to its own or either modifies the system handler (in this case the IDT remains untouched).
\end_layout

\begin_layout Chapter

Interception techniques
\end_layout

\begin_layout Standard

Wait, is this the only way to control system internals? Actually, more methods were created through the time, but all of them are based on modifying well-known system structures, the quantity of which is not so big. What structures? Some of them are IDT, MSR, DR registers (as seen above), syscall tables... What are all these abbreviatures? They may look scary at first sight, but the things are simpler. So what all those things do?
\end_layout

\begin_layout Itemize

IDT means Interrupt Descriptor Table. In simple words, it contains addresses of handlers for interrupts. As we have seen in the DR rootkit, it may be very useful. There is also another detail, before Pentium II was introduced, system calls (i.e. calls from user applications to kernel) were performed using the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0x80!
\end_layout

\end_inset

 interrupt (loading the system call number into EAX register before invoking interrupt). And guess what? The pointer to the handler for that interrupt was stored in IDT too.
\end_layout

\begin_layout Itemize

MSR stands for Model Specific Registers. Before Pentium II, interrupts were used to make system calls. It's a simple way, but unfortunately, slow. That's why 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSENTER/SYSCALL!
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSEXIT/SYSRET!
\end_layout

\end_inset

 (for Intel/AMD respectively) commands were introduced, providing a faster way to make system calls. Now the pointer to that handler of the call was not in IDT, but in a set of MSR registers. They store the target instruction, stack segment pointer etc. But the most interesting and useful for us is the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!IA_32_SYSENTER_EIP!
\end_layout

\end_inset

 which stores the target instruction. Changing it to something else will redirect all the system calls into the new procedure.
\end_layout

\begin_layout Itemize

So what is the difference between the above two methods? Only the way to 
\emph on
call
\emph default
 system procedures! Even if we examine the source of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!system_call!
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!ia32_sysenter_target!
\end_layout

\end_inset

 (there is where 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!IA_32_SYSENTER_EIP!
\end_layout

\end_inset

 points by default), in both we find 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!call *sys_call_table(,      procedures are the same in both cases (otherwise, it would be
\end_layout

\begin_layout Standard

      strange). And, of course, modifying pointers in this table can be very
\end_layout

\begin_layout Standard

      funny for the rootkit (and more for the machine owner).
\end_layout

\begin_layout Standard

  
\backslash
end{itemize}
\end_layout

\begin_layout Standard


\end_layout

\begin_layout Standard


\end_layout

\begin_layout Standard

  
\backslash
subsection{Modifying IDT}
\end_layout

\begin_layout Standard

  There are some other ways, of course, but now we will concentrate on the
\end_layout

\begin_layout Standard

  ones listed above and try to perform these ``tricks''. So, the first in the
\end_layout

\begin_layout Standard

  list is interception of interrupts via IDT. Ok, let's begin.
\end_layout

\begin_layout Standard

  
\backslash
begin{itemize}
\end_layout

\begin_layout Standard

    
\backslash
item First of all, I am going to be as kernel version independent as I
\end_layout

\begin_layout Standard

      can. It means that I am going to use resources available in the
\end_layout

\begin_layout Standard

      processor rather that predefined macros or whatever.
\end_layout

\begin_layout Standard

      
\end_layout

\begin_layout Standard

    
\backslash
item OK, before we make any changes to IDT, we obviously need to know
\end_layout

\begin_layout Standard

      where exactly it resides. An assembly command 
\backslash
verb!
\end_layout

\end_inset

SIDT! can help us with this, getting the IDTR register contents. In 32-bit systems, IDTR contains two fields: the 16-bit limit, specifying the size of the table, and 32-bit address which is the location of IDT. But there is a detail that led me to mistakes: the address is stored with low-order bytes first! We can define a function to get the register contents in easily-readable form: 
\begin_inset Include \verbatiminput{sidt.h}
preview false

\end_inset


\end_layout

\begin_layout Itemize

Half of the job is done now. However, we still need to get a particular entry in the IDT (to store the original interrupt handler, for example). In Linux on 32-bit systems, each entry in IDT is 8-bytes long and consists of an offset to the handler and some attributes. The funny thing is the offset is not continuous in the entry! The first 16 bits begin at bit 0 of the IDT entry, and the last 16 are at the end of the entry. Tricky, right? The following code can handle with this: 
\begin_inset Include \verbatiminput{idt.h}
preview false

\end_inset


\end_layout

\begin_layout Itemize

Very good! Now that we have the entries, many things can be done. But let's stop with IDT hooking and continue to the next method. 
\end_layout

\begin_layout Subsection

SYSENTER/SYSCALL interception
\end_layout

\begin_layout Standard

Well, this one is a juicy one! As I already told, beginning with Pentium II, Intel processors implemented the new 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSENTER!
\end_layout

\end_inset

/
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSEXIT!
\end_layout

\end_inset

 instructions (and AMD used 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSCALL!
\end_layout

\end_inset

/
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSRET!
\end_layout

\end_inset

). They decreased the overhead of switching from user mode and vice-versa (the interrupts are slow). These instructions used special MSR registers to know where the target procedure was located. There is one that is specially relevant to us: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSENTER_EIP_MSR!
\end_layout

\end_inset

. Its contents are loaded to the EIP register (basically a jump) at the end of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSENTER!
\end_layout

\end_inset

 execution. Initially it points to a kernel procedure, but we can change it to our procedure. How can it be done? 
\end_layout

\begin_layout Itemize

First, of course, we need a way to access the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSENTER_EIP_MSR!
\end_layout

\end_inset

 register. It's not accessed like the, let's say, EAX register. There is a special instruction, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!RDMSR!
\end_layout

\end_inset

, that does it. The only requirement is that the number of MSR register should be loaded into ECX (the number of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!SYSENTER_EIP_MSR!
\end_layout

\end_inset

 is 0x176). The contents are stored in EDX and EAX registers (EDX is 0 on 32-bit systems). 
\end_layout

\begin_layout Itemize

Now we can put a new value to the register. This process is basically an inverted version of the previous. We load the new value into EDX:EAX (EDX is zero, EAX is the new procedure pointer), the MSR register number into ECX, and perform the instruction 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!WRMSR!
\end_layout

\end_inset

. 
\end_layout

\begin_layout Itemize

I thought that an example would be more helpful than a dry description, so here is a minimal sample kernel module for this task (the includes were (duh) excluded). It's a kernel module because 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!WRMSR!
\end_layout

\end_inset

 can only be performed at ring 0: 
\begin_inset Include \verbatiminput{msr.h}
preview false

\end_inset

 
\end_layout

\begin_layout Itemize

Obviously, this module doesn't do anything special, it's more like a 
\begin_inset Quotes eld
\end_inset

proof-of-concept
\begin_inset Quotes erd
\end_inset

. But the payload will come later. 
\end_layout

\begin_layout Chapter

Designing a rootkit
\end_layout

\begin_layout Standard

Now we have the most popular methods of intercepting system internals, which are also pretty easy to detect. Usually the check consists of retrieving the system structures, registers etc. and comparing them to the original ones found in an uncompressed kernel (or the System.map file). Can the results of such a check be trusted? No! The rootkits now prefer to modify the system handlers themselves instead, as it's more difficult to discover. For example, let's see the method for debugging registers (it's simpler than other methods), but in a new way.
\end_layout

\begin_layout Subsection

Modifying the original debug handler
\end_layout

\begin_layout Enumerate

What happens when a breakpoint is reached? The 0x1 interrupt. Now we need to see what procedure is called to handle that interrupt, so let's see the IDT.
\end_layout

\begin_layout Enumerate

On my system, it reported the address 0xc125af80. This doesn't tell a lot, right? To discover what it is, I used the System.map file. The result was a function 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!debug!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

. Now this is interesting! Let's see what this function does in kernel sources. Actually, the debug entry is located (kernel 2.6.33) in the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!arch/x86/kernel/entry_32.S!
\end_layout

\end_inset

 (was tricky to find). And this is the code. 
\begin_inset Include \verbatiminput{deb_entry.S}
preview false

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

Good! The 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!call do_debug!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 seems to be the call to the 
\begin_inset Quotes eld
\end_inset

official
\begin_inset Quotes erd
\end_inset

 debug handler. And if we change it with our own handler, which then gives control to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!do_debug!
\end_layout

\end_inset

? Lots of fun! The only problem here is that we actually need to find this call and replace the original address to our own handler.
\end_layout

\end_deeper
\begin_layout Enumerate

Yes, in theory it's simple, but the practice is a bit more complicated. It should be good to see part of disassembled listing of 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!debug!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

: 
\begin_inset Include \verbatiminput{debug.s}
preview false

\end_inset

 Interesting, right? But here is a problem. As the hex code of 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!call!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 in this case is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0xe8!
\end_layout

\end_inset

, it's a relative near call. Obviously, it's not acceptable for the hooking function (the addresses will be different), so first we need to calculate the absolute offset of 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!do_debug!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

. Yes, and just for clarity: the 4-byte value after 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0xe8!
\end_layout

\end_inset

 is a signed integer. The offset is added to the address of the next instruction, in my case 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0xc125afd0!
\end_layout

\end_inset

, and (voilà!) we obtain the linear address of 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!do_debug!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

. But first, we need to find this call. According to the objdump listing provided above, the 4-byte pattern we are looking for is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0xd289e0e8!
\end_layout

\end_inset

. Digging in the kernel is hard for a human, so let's define another function. 
\emph on
Important: when we get a value from memory and use it as an integer, it's inverted (because of the endianness). So if we need to find code, we need to invert the pattern again
\emph default
: 
\begin_inset Include \verbatiminput{search.h}
preview false

\end_inset

 
\emph on
WARNING: It's not the best or the fastest code, but considering that it will usually be called only once, it's not critical
\emph default
 
\end_layout

\begin_layout Standard

Well, this is a good technique, but I will not use it because of the relatively easy way to access DR0-DR7 registers. Instead, I will use a little bit more complicated, but more reliable (in terms of ease of discovery) method of hijacking system calls directly in the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!sys_call_table!
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize

The responsible code, found both in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!system_call!
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!ia32_sysenter_target!
\end_layout

\end_inset

 (what additionally proves that system calls are located in that table), is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!call *sys_call_table(,    is the disassembled fragment of 
\backslash
verb!
\end_layout

\end_inset

ia32sysentertarget!: 
\begin_inset Include \verbatiminput{syscall_dis.S}
preview false

\end_inset

 A negative value? It cannot be, since the opcode 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0xff!
\end_layout

\end_inset

 always means an absolute offset. It's a mistake in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!objdump!
\end_layout

\end_inset

, so I sent a bug report. However, it's not that critical, and we may continue.
\end_layout

\begin_layout Itemize

Now the function 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!search!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, defined above, can be used to search the pattern 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0x00ff1485!
\end_layout

\end_inset

 (taken from the disassembly listing), and that is how we obtain the address of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!sys_call_table!
\end_layout

\end_inset

!
\end_layout

\begin_layout Itemize

Well, the table is here, but we have no idea on what entry is interesting for us. But there is a very useful file in kernel sources, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!arch/x86/kernel/syscall_table_32.S!
\end_layout

\end_inset

. I will provide a little fragment of that file: 
\begin_inset Include \verbatiminput{syscall_table.S}
preview false

\end_inset


\end_layout

\begin_layout Itemize

Why waiting?! Let's have some fun and modify the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!sys_open!
\end_layout

\end_inset

! First, I would like to define a function to find 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!sys_call_table!
\end_layout

\end_inset

 and a inline function to read a particular entry. Here they go: 
\begin_inset Include \verbatiminput{syscall.h}
preview false

\end_inset


\end_layout

\begin_layout Itemize

Now that we have all the nessesary addresses, 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!sys_open!
\end_layout

\end_inset

 can be 
\begin_inset Quotes eld
\end_inset

patched
\begin_inset Quotes erd
\end_inset

. How? I found it easier to read the disassembled listing of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!sys_open!
\end_layout

\end_inset

 (again, right?) than searching through the kernel source. Also the function is not so big, so you may see the complete listing of it: 
\begin_inset Include \verbatiminput{sys_open.S}
preview false

\end_inset

 Why so tiny? Looks more like a wrapper or something similar. And it is! Look at the 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!call 0xc10b0307!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!0xe8!
\end_layout

\end_inset

 opcode, another relative offset). In my system this address represents function 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
verb!do_sys_call!
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

. Feeling the power? Oh yes. 
\end_layout

\begin_layout Standard


\newpage
 
\end_layout

\begin_layout Standard
\start_of_appendix


\begin_inset ERT
status collapsed

\begin_layout Standard

%dummy comment inserted by tex2lyx to ensure that this paragraph is not empty
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\end_layout

\begin_layout Chapter

GNU Free Documentation License
\end_layout

\begin_layout Standard


\begin_inset Include \input{license.lyx}
preview false

\end_inset

 
\end_layout

\end_body
\end_document
